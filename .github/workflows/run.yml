# 工作流的名称
name: CI

# 触发工作流的事件
on:
  push:
    branches: [ "main", "develop" ] # 当 main 或 develop 分支有 push 时触发
  pull_request:
    branches: [ "main", "develop" ] # 当向 main 或 develop 分支发起 PR 时触发

# 定义一系列任务
jobs:
  # 任务的唯一 ID
  build:
    # 运行此任务的虚拟机环境
    runs-on: ubuntu-latest

    # 任务中的一系列步骤
    steps:
      # 第 1 步：检出代码
      # 使用官方的 checkout action 将仓库代码拉到虚拟机上
      - name: Checkout code
        uses: actions/checkout@v4

      # 第 2 步：设置 JDK 环境
      # 对于 Kotlin/JVM 项目，需要 Java 环境
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin' # 使用 Eclipse Temurin (原 AdoptOpenJDK)

      # 第 3 步：缓存 Gradle 依赖 (非常重要！可以极大提升速度)
      # 缓存 ~/.gradle/caches 和 ~/.gradle/wrapper 目录
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 第 4 步：赋予 Gradle Wrapper 执行权限
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 第 5 步：构建项目并运行测试
      # ./gradlew build 会自动编译代码、运行测试并打包
      - name: Build with Gradle
        run: ./gradlew build --no-daemon